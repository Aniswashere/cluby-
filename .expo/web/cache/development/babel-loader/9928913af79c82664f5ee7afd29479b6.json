{"ast":null,"code":"import moment from 'moment';\nexport function monthBetweenRange(month, start, end) {\n  var firstDayOfMonth = month.startOf('month').toDate();\n  var lastDayOfMonth = month.endOf('month').toDate();\n  return firstDayOfMonth <= end && firstDayOfMonth >= start || lastDayOfMonth >= start && lastDayOfMonth <= end || start <= lastDayOfMonth && end >= firstDayOfMonth;\n}\nexport function isMonthDrawn(year, month, start, end) {\n  if (start instanceof Date) {\n    start.setHours(0, 0, 0, 0);\n\n    if (end instanceof Date) {\n      end.setHours(0, 0, 0, 0);\n      var firstMonthDay = new Date(year, month, 0, 0, 0, 0, 0);\n      var lastMonthDay = new Date(year, month + 1, 0);\n      return firstMonthDay <= end && firstMonthDay >= start || lastMonthDay >= start && lastMonthDay <= end || start <= lastMonthDay && end >= firstMonthDay;\n    }\n\n    return start.getFullYear() === year && start.getMonth() === month;\n  }\n\n  return false;\n}\nexport function shouldRenderMonth(currentMonth, pervMinMax, nextMinMax) {\n  if (pervMinMax !== nextMinMax) {\n    if (pervMinMax) {\n      if (nextMinMax) {\n        if (moment(pervMinMax).isSame(currentMonth, 'month') || moment(nextMinMax).isSame(currentMonth, 'month')) {\n          return true;\n        }\n\n        var monthBetweenMinRange = pervMinMax < nextMinMax ? monthBetweenRange(currentMonth, moment(pervMinMax).toDate(), moment(nextMinMax).toDate()) : monthBetweenRange(currentMonth, moment(nextMinMax).toDate(), moment(pervMinMax).toDate());\n\n        if (monthBetweenMinRange) {\n          return true;\n        }\n      } else if (moment(pervMinMax).isSame(currentMonth, 'month')) {\n        return true;\n      }\n    } else if (moment(nextMinMax).isSame(currentMonth, 'month')) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"mappings":"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","names":["moment","monthBetweenRange","month","start","end","firstDayOfMonth","startOf","toDate","lastDayOfMonth","endOf","isMonthDrawn","year","Date","setHours","firstMonthDay","lastMonthDay","getFullYear","getMonth","shouldRenderMonth","currentMonth","pervMinMax","nextMinMax","isSame","monthBetweenMinRange"],"sources":["utils.tsx"],"sourcesContent":["import moment, { Moment } from 'moment';\n\nexport function monthBetweenRange(month: Moment, start: Date, end: Date) {\n  const firstDayOfMonth = month.startOf('month').toDate();\n  const lastDayOfMonth = month.endOf('month').toDate();\n\n  return (\n    (firstDayOfMonth <= end && firstDayOfMonth >= start) ||\n    (lastDayOfMonth >= start && lastDayOfMonth <= end) ||\n    (start <= lastDayOfMonth && end >= firstDayOfMonth)\n  );\n}\n\nexport function isMonthDrawn(\n  year: number,\n  month: number,\n  start?: Date,\n  end?: Date\n) {\n  if (start instanceof Date) {\n    start.setHours(0, 0, 0, 0);\n    if (end instanceof Date) {\n      end.setHours(0, 0, 0, 0);\n      const firstMonthDay = new Date(year, month, 0, 0, 0, 0, 0);\n      const lastMonthDay = new Date(year, month + 1, 0);\n\n      return (\n        (firstMonthDay <= end && firstMonthDay >= start) ||\n        (lastMonthDay >= start && lastMonthDay <= end) ||\n        (start <= lastMonthDay && end >= firstMonthDay)\n      );\n    }\n\n    return start.getFullYear() === year && start.getMonth() === month;\n  }\n\n  return false;\n}\n\nexport function shouldRenderMonth(\n  currentMonth: Moment,\n  pervMinMax?: Date,\n  nextMinMax?: Date\n) {\n  if (pervMinMax !== nextMinMax) {\n    if (pervMinMax) {\n      if (nextMinMax) {\n        if (\n          moment(pervMinMax).isSame(currentMonth, 'month') ||\n          moment(nextMinMax).isSame(currentMonth, 'month')\n        ) {\n          return true;\n        }\n\n        const monthBetweenMinRange =\n          pervMinMax < nextMinMax\n            ? monthBetweenRange(\n                currentMonth,\n                moment(pervMinMax).toDate(),\n                moment(nextMinMax).toDate()\n              )\n            : monthBetweenRange(\n                currentMonth,\n                moment(nextMinMax).toDate(),\n                moment(pervMinMax).toDate()\n              );\n\n        if (monthBetweenMinRange) {\n          return true;\n        }\n      } else if (moment(pervMinMax).isSame(currentMonth, 'month')) {\n        return true;\n      }\n    } else if (moment(nextMinMax).isSame(currentMonth, 'month')) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}