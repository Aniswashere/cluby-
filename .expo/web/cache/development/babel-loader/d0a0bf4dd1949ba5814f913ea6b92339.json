{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useCallback, useRef, useState, useMemo, forwardRef } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport moment from 'moment';\nimport Month from \"./Month\";\nimport useMonths from \"../hooks/use-months\";\nimport useRange from \"../hooks/use-range\";\nimport { getMonthIndex } from \"../utils/date\";\nvar NUMBER_OF_MONTHS = 12;\nvar MONTH_HEIGHT = 370;\nvar INITIAL_LIST_SIZE = 2;\nvar VIEWABLE_RANGE_OFFSET = 5;\nvar VIEWABILITY_CONFIG = {\n  waitForInteraction: true,\n  itemVisiblePercentThreshold: 10,\n  minimumViewTime: 32\n};\nvar Calendar = forwardRef(function (props, ref) {\n  var _props$numberOfMonths = props.numberOfMonths,\n      numberOfMonths = _props$numberOfMonths === void 0 ? NUMBER_OF_MONTHS : _props$numberOfMonths,\n      _props$startingMonth = props.startingMonth,\n      startingMonth = _props$startingMonth === void 0 ? moment().format('YYYY-MM-DD') : _props$startingMonth,\n      _props$initialListSiz = props.initialListSize,\n      initialListSize = _props$initialListSiz === void 0 ? INITIAL_LIST_SIZE : _props$initialListSiz,\n      _props$showWeekdays = props.showWeekdays,\n      showWeekdays = _props$showWeekdays === void 0 ? true : _props$showWeekdays,\n      _props$showMonthTitle = props.showMonthTitle,\n      showMonthTitle = _props$showMonthTitle === void 0 ? true : _props$showMonthTitle,\n      _props$theme = props.theme,\n      theme = _props$theme === void 0 ? {} : _props$theme,\n      _props$locale = props.locale,\n      locale = _props$locale === void 0 ? 'en' : _props$locale,\n      _props$disableRange = props.disableRange,\n      disableRange = _props$disableRange === void 0 ? false : _props$disableRange,\n      _props$firstDayMonday = props.firstDayMonday,\n      firstDayMonday = _props$firstDayMonday === void 0 ? false : _props$firstDayMonday,\n      _props$monthHeight = props.monthHeight,\n      monthHeight = _props$monthHeight === void 0 ? MONTH_HEIGHT : _props$monthHeight,\n      _props$disableOffsetD = props.disableOffsetDays,\n      disableOffsetDays = _props$disableOffsetD === void 0 ? false : _props$disableOffsetD,\n      _props$viewableRangeO = props.viewableRangeOffset,\n      viewableRangeOffset = _props$viewableRangeO === void 0 ? VIEWABLE_RANGE_OFFSET : _props$viewableRangeO,\n      monthNames = props.monthNames,\n      onPress = props.onPress,\n      dayNames = props.dayNames,\n      startDate = props.startDate,\n      endDate = props.endDate;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      firstViewableIndex = _useState2[0],\n      setFirstViewableIndex = _useState2[1];\n\n  var _useState3 = useState(INITIAL_LIST_SIZE + viewableRangeOffset),\n      _useState4 = _slicedToArray(_useState3, 2),\n      lastViewableIndex = _useState4[0],\n      setLastViewableIndex = _useState4[1];\n\n  var _useMonths = useMonths({\n    numberOfMonths: numberOfMonths,\n    startingMonth: startingMonth\n  }),\n      months = _useMonths.months,\n      firstMonthToRender = _useMonths.firstMonth;\n\n  var _useRange = useRange({\n    startDate: startDate,\n    endDate: endDate,\n    firstMonthToRender: firstMonthToRender,\n    numberOfMonths: numberOfMonths\n  }),\n      localStartDate = _useRange.start,\n      localEndDate = _useRange.end;\n\n  var firstMonthIndex = useMemo(function () {\n    if (localStartDate) {\n      var monthIndex = getMonthIndex(firstMonthToRender, localStartDate, months, numberOfMonths);\n\n      if (monthIndex !== null) {\n        return monthIndex;\n      }\n    }\n\n    return 0;\n  }, [firstMonthToRender, localStartDate, months, numberOfMonths]);\n  var getItemLayout = useCallback(function (_data, index) {\n    return {\n      length: monthHeight,\n      offset: monthHeight * index,\n      index: index\n    };\n  }, [monthHeight]);\n  var keyExtractor = useCallback(function (_item, index) {\n    return String(index);\n  }, []);\n  var onViewableItemsChanged = useCallback(function (info) {\n    if (props.viewableItemsChanged) {\n      props.viewableItemsChanged(info);\n    }\n\n    if (props.renderAllMonths) {\n      return;\n    }\n\n    var viewableItems = info.viewableItems;\n\n    if (viewableItems.length > 0) {\n      var firstViewableItem = viewableItems[0],\n          l = viewableItems.length,\n          lastViewableItem = viewableItems[l - 1];\n\n      if (firstViewableIndex !== firstViewableItem.index || lastViewableIndex !== lastViewableItem.index) {\n        setFirstViewableIndex(firstViewableItem.index);\n        setLastViewableIndex(lastViewableItem.index + VIEWABLE_RANGE_OFFSET);\n      }\n    }\n  }, [firstViewableIndex, lastViewableIndex, props]);\n  var viewabilityConfigCallbackPairs = useRef([{\n    viewabilityConfig: VIEWABILITY_CONFIG,\n    onViewableItemsChanged: onViewableItemsChanged\n  }]);\n  var handlePress = useCallback(function (date) {\n    if (onPress) {\n      onPress(date);\n    }\n  }, [onPress]);\n  var renderMonth = useCallback(function (_ref) {\n    var index = _ref.index;\n    var month = moment(firstMonthToRender).add(index, 'months');\n    return React.createElement(Month, {\n      month: month.month(),\n      year: month.year(),\n      index: index,\n      firstMonthToRender: firstMonthToRender,\n      monthNames: monthNames,\n      onPress: handlePress,\n      theme: theme,\n      renderAllMonths: props.renderAllMonths,\n      showWeekdays: showWeekdays,\n      showMonthTitle: showMonthTitle,\n      locale: locale,\n      dayNames: dayNames,\n      height: monthHeight,\n      firstDayMonday: firstDayMonday,\n      renderDayContent: props.renderDayContent,\n      markedDays: props.markedDays,\n      minDate: props.minDate,\n      maxDate: props.maxDate,\n      startDate: localStartDate,\n      endDate: localEndDate,\n      disableRange: disableRange,\n      disabledDays: props.disabledDays,\n      disableOffsetDays: disableOffsetDays,\n      firstViewableIndex: firstViewableIndex,\n      lastViewableIndex: lastViewableIndex,\n      viewableRangeOffset: viewableRangeOffset\n    });\n  }, [dayNames, disableOffsetDays, disableRange, firstDayMonday, firstMonthToRender, firstViewableIndex, handlePress, lastViewableIndex, localEndDate, localStartDate, locale, monthHeight, monthNames, props.disabledDays, props.markedDays, props.maxDate, props.minDate, props.renderAllMonths, props.renderDayContent, showMonthTitle, showWeekdays, theme, viewableRangeOffset]);\n  var isWeb = Platform.OS === 'web';\n  var initialNumToRender = isWeb ? numberOfMonths : initialListSize;\n  return React.createElement(FlatList, {\n    getItemLayout: !isWeb ? getItemLayout : undefined,\n    initialScrollIndex: !isWeb ? firstMonthIndex : 0,\n    removeClippedSubviews: true,\n    initialNumToRender: initialNumToRender,\n    keyExtractor: keyExtractor,\n    viewabilityConfigCallbackPairs: viewabilityConfigCallbackPairs.current,\n    renderItem: renderMonth,\n    data: months,\n    ref: ref\n  });\n});\nCalendar.displayName = 'Calendar';\nexport default Calendar;","map":{"version":3,"mappings":"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","names":["React","useCallback","useRef","useState","useMemo","forwardRef","moment","Month","useMonths","useRange","getMonthIndex","NUMBER_OF_MONTHS","MONTH_HEIGHT","INITIAL_LIST_SIZE","VIEWABLE_RANGE_OFFSET","VIEWABILITY_CONFIG","waitForInteraction","itemVisiblePercentThreshold","minimumViewTime","Calendar","props","ref","numberOfMonths","startingMonth","format","initialListSize","showWeekdays","showMonthTitle","theme","locale","disableRange","firstDayMonday","monthHeight","disableOffsetDays","viewableRangeOffset","monthNames","onPress","dayNames","startDate","endDate","firstViewableIndex","setFirstViewableIndex","lastViewableIndex","setLastViewableIndex","months","firstMonthToRender","firstMonth","localStartDate","start","localEndDate","end","firstMonthIndex","monthIndex","getItemLayout","_data","index","length","offset","keyExtractor","_item","String","onViewableItemsChanged","info","viewableItemsChanged","renderAllMonths","viewableItems","firstViewableItem","l","lastViewableItem","viewabilityConfigCallbackPairs","viewabilityConfig","handlePress","date","renderMonth","month","add","year","height","renderDayContent","markedDays","minDate","maxDate","disabledDays","isWeb","Platform","OS","initialNumToRender","FlatList","undefined","initialScrollIndex","removeClippedSubviews","current","renderItem","data","displayName"],"sources":["Calendar.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useRef,\n  useState,\n  useMemo,\n  forwardRef,\n  Ref,\n} from 'react';\nimport { FlatList, Platform } from 'react-native';\nimport moment from 'moment';\n\nimport Month from './Month';\nimport useMonths from '../hooks/use-months';\nimport useRange from '../hooks/use-range';\nimport { getMonthIndex } from '../utils/date';\nimport { CalendarProps, ViewableItemsType } from '../types';\n\nconst NUMBER_OF_MONTHS = 12;\nconst MONTH_HEIGHT = 370;\nconst INITIAL_LIST_SIZE = 2;\nconst VIEWABLE_RANGE_OFFSET = 5;\n\nconst VIEWABILITY_CONFIG = {\n  waitForInteraction: true,\n  itemVisiblePercentThreshold: 10,\n  minimumViewTime: 32,\n};\n\nconst Calendar = forwardRef((props: CalendarProps, ref: Ref<FlatList>) => {\n  const {\n    numberOfMonths = NUMBER_OF_MONTHS,\n    startingMonth = moment().format('YYYY-MM-DD'),\n    initialListSize = INITIAL_LIST_SIZE,\n    showWeekdays = true,\n    showMonthTitle = true,\n    theme = {},\n    locale = 'en',\n    disableRange = false,\n    firstDayMonday = false,\n    monthHeight = MONTH_HEIGHT,\n    disableOffsetDays = false,\n    viewableRangeOffset = VIEWABLE_RANGE_OFFSET,\n    monthNames,\n    onPress,\n    dayNames,\n    startDate,\n    endDate,\n  } = props;\n\n  const [firstViewableIndex, setFirstViewableIndex] = useState(0);\n  const [lastViewableIndex, setLastViewableIndex] = useState(\n    INITIAL_LIST_SIZE + viewableRangeOffset!\n  );\n\n  const { months, firstMonth: firstMonthToRender } = useMonths({\n    numberOfMonths,\n    startingMonth,\n  });\n\n  const { start: localStartDate, end: localEndDate } = useRange({\n    startDate,\n    endDate,\n    firstMonthToRender,\n    numberOfMonths,\n  });\n\n  const firstMonthIndex = useMemo(() => {\n    if (localStartDate) {\n      const monthIndex = getMonthIndex(\n        firstMonthToRender,\n        localStartDate,\n        months,\n        numberOfMonths\n      );\n\n      if (monthIndex !== null) {\n        return monthIndex;\n      }\n    }\n\n    return 0;\n  }, [firstMonthToRender, localStartDate, months, numberOfMonths]);\n\n  const getItemLayout = useCallback(\n    (\n      _data: any,\n      index: number\n    ): { length: number; offset: number; index: number } => ({\n      length: monthHeight,\n      offset: monthHeight * index,\n      index,\n    }),\n    [monthHeight]\n  );\n\n  const keyExtractor = useCallback(\n    (_item: any, index: number): string => String(index),\n    []\n  );\n\n  const onViewableItemsChanged = useCallback(\n    (info: ViewableItemsType) => {\n      if (props.viewableItemsChanged) {\n        props.viewableItemsChanged(info);\n      }\n\n      if (props.renderAllMonths) {\n        return;\n      }\n\n      const { viewableItems } = info;\n\n      if (viewableItems.length > 0) {\n        const {\n          0: firstViewableItem,\n          length: l,\n          [l - 1]: lastViewableItem,\n        } = viewableItems;\n\n        if (\n          firstViewableIndex !== firstViewableItem.index ||\n          lastViewableIndex !== lastViewableItem.index\n        ) {\n          setFirstViewableIndex(firstViewableItem.index!);\n          setLastViewableIndex(lastViewableItem.index! + VIEWABLE_RANGE_OFFSET);\n        }\n      }\n    },\n    [firstViewableIndex, lastViewableIndex, props]\n  );\n\n  const viewabilityConfigCallbackPairs = useRef([\n    {\n      viewabilityConfig: VIEWABILITY_CONFIG,\n      onViewableItemsChanged,\n    },\n  ]);\n\n  const handlePress = useCallback(\n    (date: Date) => {\n      if (onPress) {\n        onPress(date);\n      }\n    },\n    [onPress]\n  );\n\n  const renderMonth = useCallback(\n    ({ index }: { index: number }) => {\n      const month = moment(firstMonthToRender).add(index, 'months');\n\n      return (\n        <Month\n          month={month.month()}\n          year={month.year()}\n          index={index}\n          firstMonthToRender={firstMonthToRender}\n          monthNames={monthNames}\n          onPress={handlePress}\n          theme={theme}\n          renderAllMonths={props.renderAllMonths}\n          showWeekdays={showWeekdays}\n          showMonthTitle={showMonthTitle}\n          locale={locale}\n          dayNames={dayNames}\n          height={monthHeight}\n          firstDayMonday={firstDayMonday}\n          renderDayContent={props.renderDayContent}\n          markedDays={props.markedDays}\n          minDate={props.minDate}\n          maxDate={props.maxDate}\n          startDate={localStartDate}\n          endDate={localEndDate}\n          disableRange={disableRange}\n          disabledDays={props.disabledDays}\n          disableOffsetDays={disableOffsetDays}\n          firstViewableIndex={firstViewableIndex}\n          lastViewableIndex={lastViewableIndex}\n          viewableRangeOffset={viewableRangeOffset!}\n        />\n      );\n    },\n    [\n      dayNames,\n      disableOffsetDays,\n      disableRange,\n      firstDayMonday,\n      firstMonthToRender,\n      firstViewableIndex,\n      handlePress,\n      lastViewableIndex,\n      localEndDate,\n      localStartDate,\n      locale,\n      monthHeight,\n      monthNames,\n      props.disabledDays,\n      props.markedDays,\n      props.maxDate,\n      props.minDate,\n      props.renderAllMonths,\n      props.renderDayContent,\n      showMonthTitle,\n      showWeekdays,\n      theme,\n      viewableRangeOffset,\n    ]\n  );\n\n  const isWeb = Platform.OS === 'web';\n  const initialNumToRender = isWeb ? numberOfMonths : initialListSize;\n\n  return (\n    <FlatList\n      getItemLayout={!isWeb ? getItemLayout : undefined}\n      initialScrollIndex={!isWeb ? firstMonthIndex : 0}\n      removeClippedSubviews\n      initialNumToRender={initialNumToRender}\n      keyExtractor={keyExtractor}\n      viewabilityConfigCallbackPairs={viewabilityConfigCallbackPairs.current}\n      renderItem={renderMonth}\n      data={months}\n      ref={ref}\n    />\n  );\n});\n\nCalendar.displayName = 'Calendar';\n\nexport default Calendar;\n"]},"metadata":{},"sourceType":"module"}