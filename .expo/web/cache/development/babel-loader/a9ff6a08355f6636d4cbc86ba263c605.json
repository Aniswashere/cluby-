{"ast":null,"code":"import React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { getDayNames } from \"../../utils/date\";\nimport { getMonthDays, areEqual } from \"../utils\";\nimport WeekDays from \"../WeekDays\";\nimport Day from \"../Day\";\nvar styles = StyleSheet.create({\n  weekContainer: {\n    flexDirection: 'row'\n  }\n});\nexport default React.memo(function (props) {\n  var month = props.month,\n      year = props.year,\n      onPress = props.onPress,\n      _props$locale = props.locale,\n      locale = _props$locale === void 0 ? 'en' : _props$locale,\n      dayNames = props.dayNames,\n      showWeekdays = props.showWeekdays,\n      _props$disabledDays = props.disabledDays,\n      disabledDays = _props$disabledDays === void 0 ? {} : _props$disabledDays,\n      _props$disableRange = props.disableRange,\n      disableRange = _props$disableRange === void 0 ? false : _props$disableRange,\n      _props$disableOffsetD = props.disableOffsetDays,\n      disableOffsetDays = _props$disableOffsetD === void 0 ? false : _props$disableOffsetD,\n      _props$firstDayMonday = props.firstDayMonday,\n      firstDayMonday = _props$firstDayMonday === void 0 ? true : _props$firstDayMonday,\n      startDate = props.startDate,\n      endDate = props.endDate,\n      minDate = props.minDate,\n      maxDate = props.maxDate,\n      _props$markedDays = props.markedDays,\n      markedDays = _props$markedDays === void 0 ? {} : _props$markedDays,\n      _props$theme = props.theme,\n      theme = _props$theme === void 0 ? {} : _props$theme,\n      renderDayContent = props.renderDayContent;\n  var DAY_NAMES = Array.isArray(dayNames) && dayNames.length === 7 ? dayNames : getDayNames(locale, firstDayMonday);\n  var days = getMonthDays(month, year, firstDayMonday, disableRange, disabledDays, disableOffsetDays, startDate, endDate, minDate, maxDate);\n  var weeks = [];\n\n  while (days.length) {\n    weeks.push(days.splice(0, 7));\n  }\n\n  return React.createElement(React.Fragment, null, showWeekdays && React.createElement(WeekDays, {\n    days: DAY_NAMES,\n    theme: theme\n  }), weeks.map(function (week, index) {\n    return React.createElement(View, {\n      key: String(index),\n      style: styles.weekContainer\n    }, week.map(function (day) {\n      return React.createElement(Day, {\n        key: day.key,\n        item: day,\n        dots: markedDays[day.id] ? markedDays[day.id].dots : [],\n        onPress: onPress,\n        theme: theme,\n        renderDayContent: renderDayContent\n      });\n    }));\n  }));\n}, areEqual);","map":{"version":3,"mappings":"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","names":["React","getDayNames","getMonthDays","areEqual","WeekDays","Day","styles","StyleSheet","create","weekContainer","flexDirection","memo","props","month","year","onPress","locale","dayNames","showWeekdays","disabledDays","disableRange","disableOffsetDays","firstDayMonday","startDate","endDate","minDate","maxDate","markedDays","theme","renderDayContent","DAY_NAMES","Array","isArray","length","days","weeks","push","splice","map","week","index","View","key","String","style","day","item","dots","id"],"sources":["index.tsx"],"sourcesContent":["import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { DayType, MonthProps } from '../../types';\nimport { getDayNames } from '../../utils/date';\nimport { getMonthDays, areEqual } from '../utils';\nimport WeekDays from '../WeekDays';\nimport Day from '../Day';\n\nconst styles = StyleSheet.create({\n  weekContainer: {\n    flexDirection: 'row',\n  },\n});\n\nexport default React.memo<MonthProps>((props: MonthProps) => {\n  const {\n    month,\n    year,\n    onPress,\n    locale = 'en',\n    dayNames,\n    showWeekdays,\n    disabledDays = {},\n    disableRange = false,\n    disableOffsetDays = false,\n    firstDayMonday = true,\n    startDate,\n    endDate,\n    minDate,\n    maxDate,\n    markedDays = {},\n    theme = {},\n    renderDayContent,\n  } = props;\n\n  const DAY_NAMES =\n    Array.isArray(dayNames) && dayNames.length === 7\n      ? dayNames\n      : getDayNames(locale, firstDayMonday);\n\n  const days = getMonthDays(\n    month,\n    year,\n    firstDayMonday,\n    disableRange,\n    disabledDays,\n    disableOffsetDays,\n    startDate,\n    endDate,\n    minDate,\n    maxDate\n  );\n\n  const weeks = [];\n\n  while (days.length) {\n    weeks.push(days.splice(0, 7));\n  }\n\n  return (\n    <>\n      {showWeekdays && <WeekDays days={DAY_NAMES} theme={theme} />}\n      {weeks.map((week: DayType[], index: number) => (\n        <View key={String(index)} style={styles.weekContainer}>\n          {week.map((day: DayType) => (\n            <Day\n              key={day.key}\n              item={day}\n              dots={markedDays[day.id] ? markedDays[day.id].dots : []}\n              onPress={onPress}\n              theme={theme}\n              renderDayContent={renderDayContent}\n            />\n          ))}\n        </View>\n      ))}\n    </>\n  );\n}, areEqual);\n"]},"metadata":{},"sourceType":"module"}