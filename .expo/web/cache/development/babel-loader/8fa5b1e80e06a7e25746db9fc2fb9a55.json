{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"label\", \"icon\", \"isPassword\", \"hidePassword\", \"setHidePassword\", \"isDate\", \"showDatePicker\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState, useContext } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { Formik } from 'formik';\nimport { StyledContainer, PageTitle, StyledInputLabel, StyledFormArea, StyledButton, StyledTextInput, LeftIcon, RightIcon, InnerContainer, ButtonText, MsgBox, Line, ExtraView, ExtraText, TextLink, TextLinkContent, SubTitle, Colors } from \"../components/utils/styles1\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nvar darkLight = Colors.darkLight,\n    brand = Colors.brand,\n    primary = Colors.primary;\nimport { Octicons, Ionicons } from '@expo/vector-icons';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport KeyboardAvoidingWrapper from \"../components/utils/KeyboardAvoidingWrapper\";\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { CredentialsContext } from \"./../components/utils/CredentialsContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Signup = function Signup(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      hidePassword = _useState2[0],\n      setHidePassword = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      show = _useState4[0],\n      setShow = _useState4[1];\n\n  var _useState5 = useState(new Date(2000, 0, 1)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      date = _useState6[0],\n      setDate = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      message = _useState8[0],\n      setMessage = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      messageType = _useState10[0],\n      setMessageType = _useState10[1];\n\n  var _useState11 = useState(),\n      _useState12 = _slicedToArray(_useState11, 2),\n      dob = _useState12[0],\n      setDob = _useState12[1];\n\n  var onChange = function onChange(date, selectedDate) {\n    var currentDate = selectedDate || date;\n    setShow(false);\n    setDate(currentDate);\n    setDob(currentDate);\n  };\n\n  var showDatePicker = function showDatePicker() {\n    setShow('date');\n  };\n\n  var _useContext = useContext(CredentialsContext),\n      storedCredentials = _useContext.storedCredentials,\n      setStoredCredentials = _useContext.setStoredCredentials;\n\n  var handleSignup = function handleSignup(credentials, setSubmitting) {\n    handleMessage(null);\n    var url = 'http://localhost:3000/users/register';\n    axios.post(url, credentials).then(function (response) {\n      var result = response.data;\n      var status = result.status,\n          message = result.message,\n          data = result.data;\n\n      if (status !== 'SUCCESS') {\n        handleMessage(message, status);\n      } else {\n        persistLogin(_objectSpread({}, data), message, status);\n      }\n\n      setSubmitting(false);\n    }).catch(function (error) {\n      setSubmitting(false);\n      handleMessage('An error occurred. Check your network and try again');\n      console.log(error.toJSON());\n    });\n  };\n\n  var handleMessage = function handleMessage(message) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    setMessage(message);\n    setMessageType(type);\n  };\n\n  return _jsx(KeyboardAvoidingWrapper, {\n    children: _jsxs(StyledContainer, {\n      children: [_jsx(StatusBar, {\n        style: \"dark\"\n      }), _jsxs(InnerContainer, {\n        children: [_jsx(PageTitle, {\n          children: \"Cluby\"\n        }), _jsx(SubTitle, {\n          children: \"Account Signup\"\n        }), show && _jsx(DateTimePicker, {\n          testID: \"dateTimePicker\",\n          value: date,\n          mode: \"date\",\n          is24Hour: true,\n          display: \"default\",\n          onChange: onChange,\n          style: {\n            backgroundColor: 'yellow'\n          }\n        }), _jsx(Formik, {\n          initialValues: {\n            name: '',\n            email: '',\n            dateOfBirth: '',\n            password: '',\n            confirmPassword: ''\n          },\n          onSubmit: function onSubmit(values, _ref2) {\n            var setSubmitting = _ref2.setSubmitting;\n            values = _objectSpread(_objectSpread({}, values), {}, {\n              dateOfBirth: dob\n            });\n\n            if (values.email == '' || values.password == '' || values.name == '' || values.dateOfBirth == '' || values.confirmPassword == '') {\n              handleMessage('Please fill in all fields');\n              setSubmitting(false);\n            } else if (values.password !== values.confirmPassword) {\n              handleMessage('Passwords do not match');\n              setSubmitting(false);\n            } else {\n              handleSignup(values, setSubmitting);\n            }\n          },\n          children: function children(_ref3) {\n            var handleChange = _ref3.handleChange,\n                handleBlur = _ref3.handleBlur,\n                handleSubmit = _ref3.handleSubmit,\n                values = _ref3.values,\n                isSubmitting = _ref3.isSubmitting;\n            return _jsxs(StyledFormArea, {\n              children: [_jsx(MyTextInput, {\n                label: \"Full Name\",\n                placeholder: \"Richard Barnes\",\n                placeholderTextColor: darkLight,\n                onChangeText: handleChange('name'),\n                onBlur: handleBlur('name'),\n                value: values.name,\n                icon: \"person\"\n              }), _jsx(MyTextInput, {\n                label: \"Email Address\",\n                placeholder: \"andyj@gmail.com\",\n                placeholderTextColor: darkLight,\n                onChangeText: handleChange('email'),\n                onBlur: handleBlur('email'),\n                value: values.email,\n                keyboardType: \"email-address\",\n                icon: \"mail\"\n              }), _jsx(MyTextInput, {\n                label: \"Date of Birth\",\n                placeholder: \"YYYY - MM - DD\",\n                placeholderTextColor: darkLight,\n                onChangeText: handleChange('dateOfBirth'),\n                onBlur: handleBlur('dateOfBirth'),\n                value: dob ? dob.toDateString() : '',\n                icon: \"calendar\",\n                editable: false,\n                isDate: true,\n                showDatePicker: showDatePicker\n              }), _jsx(MyTextInput, {\n                label: \"Password\",\n                placeholder: \"* * * * * * * *\",\n                placeholderTextColor: darkLight,\n                onChangeText: handleChange('password'),\n                onBlur: handleBlur('password'),\n                value: values.password,\n                secureTextEntry: hidePassword,\n                icon: \"lock\",\n                isPassword: true,\n                hidePassword: hidePassword,\n                setHidePassword: setHidePassword\n              }), _jsx(MyTextInput, {\n                label: \"Confirm Password\",\n                placeholder: \"* * * * * * * *\",\n                placeholderTextColor: darkLight,\n                onChangeText: handleChange('confirmPassword'),\n                onBlur: handleBlur('confirmPassword'),\n                value: values.confirmPassword,\n                secureTextEntry: hidePassword,\n                icon: \"lock\",\n                isPassword: true,\n                hidePassword: hidePassword,\n                setHidePassword: setHidePassword\n              }), _jsx(MsgBox, {\n                type: messageType,\n                children: message\n              }), !isSubmitting && _jsx(StyledButton, {\n                onPress: handleSubmit,\n                children: _jsx(ButtonText, {\n                  children: \"Signup\"\n                })\n              }), isSubmitting && _jsx(StyledButton, {\n                disabled: true,\n                children: _jsx(ActivityIndicator, {\n                  size: \"large\",\n                  color: primary\n                })\n              }), _jsx(Line, {}), _jsxs(ExtraView, {\n                children: [_jsx(ExtraText, {\n                  children: \"Already have an account? \"\n                }), _jsx(TextLink, {\n                  onPress: function onPress() {\n                    return navigation.navigate('Login');\n                  },\n                  children: _jsx(TextLinkContent, {\n                    children: \"Login\"\n                  })\n                })]\n              })]\n            });\n          }\n        })]\n      })]\n    })\n  });\n};\n\nvar MyTextInput = function MyTextInput(_ref4) {\n  var label = _ref4.label,\n      icon = _ref4.icon,\n      isPassword = _ref4.isPassword,\n      hidePassword = _ref4.hidePassword,\n      setHidePassword = _ref4.setHidePassword,\n      isDate = _ref4.isDate,\n      showDatePicker = _ref4.showDatePicker,\n      props = _objectWithoutProperties(_ref4, _excluded);\n\n  return _jsxs(View, {\n    children: [_jsx(LeftIcon, {\n      children: _jsx(Octicons, {\n        name: icon,\n        size: 30,\n        color: brand\n      })\n    }), _jsx(StyledInputLabel, {\n      children: label\n    }), isDate && _jsx(TouchableOpacity, {\n      onPress: showDatePicker,\n      children: _jsx(StyledTextInput, _objectSpread({}, props))\n    }), !isDate && _jsx(StyledTextInput, _objectSpread({}, props)), isPassword && _jsx(RightIcon, {\n      onPress: function onPress() {\n        setHidePassword(!hidePassword);\n      },\n      children: _jsx(Ionicons, {\n        name: hidePassword ? 'md-eye-off' : 'md-eye',\n        size: 30,\n        color: darkLight\n      })\n    })]\n  });\n};\n\nexport default Signup;","map":{"version":3,"sources":["C:/Users/admin/projettttt/cluby-main/cluby front7/src/screens/Register.js"],"names":["React","useState","useContext","StatusBar","Formik","StyledContainer","PageTitle","StyledInputLabel","StyledFormArea","StyledButton","StyledTextInput","LeftIcon","RightIcon","InnerContainer","ButtonText","MsgBox","Line","ExtraView","ExtraText","TextLink","TextLinkContent","SubTitle","Colors","darkLight","brand","primary","Octicons","Ionicons","DateTimePicker","KeyboardAvoidingWrapper","axios","AsyncStorage","CredentialsContext","Signup","navigation","hidePassword","setHidePassword","show","setShow","Date","date","setDate","message","setMessage","messageType","setMessageType","dob","setDob","onChange","selectedDate","currentDate","showDatePicker","storedCredentials","setStoredCredentials","handleSignup","credentials","setSubmitting","handleMessage","url","post","then","response","result","data","status","persistLogin","catch","error","console","log","toJSON","type","backgroundColor","name","email","dateOfBirth","password","confirmPassword","values","handleChange","handleBlur","handleSubmit","isSubmitting","toDateString","navigate","MyTextInput","label","icon","isPassword","isDate","props"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\r\nimport { StatusBar } from 'expo-status-bar';\r\n\r\n// formik\r\nimport { Formik } from 'formik';\r\n\r\nimport {\r\n  StyledContainer,\r\n  PageTitle,\r\n  StyledInputLabel,\r\n  StyledFormArea,\r\n  StyledButton,\r\n  StyledTextInput,\r\n  LeftIcon,\r\n  RightIcon,\r\n  InnerContainer,\r\n  ButtonText,\r\n  MsgBox,\r\n  Line,\r\n  ExtraView,\r\n  ExtraText,\r\n  TextLink,\r\n  TextLinkContent,\r\n  SubTitle,\r\n  Colors,\r\n} from '../components/utils/styles1';\r\nimport { View, TouchableOpacity, ActivityIndicator } from 'react-native';\r\n\r\n//colors\r\nconst { darkLight, brand, primary } = Colors;\r\n\r\n// icon\r\nimport { Octicons, Ionicons } from '@expo/vector-icons';\r\n\r\n// Datetimepicker\r\nimport DateTimePicker from '@react-native-community/datetimepicker';\r\n\r\n// keyboard avoiding view\r\nimport KeyboardAvoidingWrapper from '../components/utils/KeyboardAvoidingWrapper';\r\n\r\n// api client\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n// Async storage\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n// credentials context\r\nimport { CredentialsContext } from './../components/utils/CredentialsContext';\r\n\r\nconst Signup = ({ navigation }) => {\r\n  const [hidePassword, setHidePassword] = useState(true);\r\n  const [show, setShow] = useState(false);\r\n  const [date, setDate] = useState(new Date(2000, 0, 1));\r\n  const [message, setMessage] = useState();\r\n  const [messageType, setMessageType] = useState();\r\n\r\n  // Actual value to be sent\r\n  const [dob, setDob] = useState();\r\n\r\n  const onChange = (date, selectedDate) => {\r\n    const currentDate = selectedDate || date;\r\n    setShow(false);\r\n    setDate(currentDate);\r\n    setDob(currentDate);\r\n  };\r\n\r\n  const showDatePicker = () => {\r\n    setShow('date');\r\n  };\r\n\r\n    // credentials context\r\n    const {storedCredentials, setStoredCredentials} = useContext(CredentialsContext);\r\n\r\n  // Form handling\r\n  const handleSignup = (credentials, setSubmitting) => {\r\n    handleMessage(null);\r\n    const url = 'http://localhost:3000/users/register';\r\n    axios\r\n      .post(url, credentials)\r\n      .then((response) => {\r\n        const result = response.data;\r\n        const { status, message, data } = result;\r\n\r\n        if (status !== 'SUCCESS') {\r\n          handleMessage(message, status);\r\n        } else {\r\n          persistLogin({ ...data } ,message, status);\r\n        }\r\n        setSubmitting(false);\r\n      })\r\n      .catch((error) => {\r\n        setSubmitting(false);\r\n        handleMessage('An error occurred. Check your network and try again');\r\n        console.log(error.toJSON());\r\n      });\r\n  };\r\n\r\n  const handleMessage = (message, type = '') => {\r\n    setMessage(message);\r\n    setMessageType(type);\r\n  };\r\n\r\n  \r\n  return (\r\n    <KeyboardAvoidingWrapper>\r\n      <StyledContainer>\r\n        <StatusBar style=\"dark\" />\r\n        <InnerContainer>\r\n          <PageTitle>Cluby</PageTitle>\r\n          <SubTitle>Account Signup</SubTitle>\r\n          {show && (\r\n            <DateTimePicker\r\n              testID=\"dateTimePicker\"\r\n              value={date}\r\n              mode=\"date\"\r\n              is24Hour={true}\r\n              display=\"default\"\r\n              onChange={onChange}\r\n              style={{\r\n                backgroundColor: 'yellow',\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <Formik\r\n            initialValues={{ name: '', email: '', dateOfBirth: '', password: '', confirmPassword: '' }}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n              values = { ...values, dateOfBirth: dob };\r\n              if (\r\n                values.email == '' ||\r\n                values.password == '' ||\r\n                values.name == '' ||\r\n                values.dateOfBirth == '' ||\r\n                values.confirmPassword == ''\r\n              ) {\r\n                handleMessage('Please fill in all fields');\r\n                setSubmitting(false);\r\n              } else if (values.password !== values.confirmPassword) {\r\n                handleMessage('Passwords do not match');\r\n                setSubmitting(false);\r\n              } else {\r\n                handleSignup(values, setSubmitting);\r\n              }\r\n            }}\r\n          >\r\n            {({ handleChange, handleBlur, handleSubmit, values, isSubmitting }) => (\r\n              <StyledFormArea>\r\n                <MyTextInput\r\n                  label=\"Full Name\"\r\n                  placeholder=\"Richard Barnes\"\r\n                  placeholderTextColor={darkLight}\r\n                  onChangeText={handleChange('name')}\r\n                  onBlur={handleBlur('name')}\r\n                  value={values.name}\r\n                  icon=\"person\"\r\n                />\r\n                <MyTextInput\r\n                  label=\"Email Address\"\r\n                  placeholder=\"andyj@gmail.com\"\r\n                  placeholderTextColor={darkLight}\r\n                  onChangeText={handleChange('email')}\r\n                  onBlur={handleBlur('email')}\r\n                  value={values.email}\r\n                  keyboardType=\"email-address\"\r\n                  icon=\"mail\"\r\n                />\r\n                <MyTextInput\r\n                  label=\"Date of Birth\"\r\n                  placeholder=\"YYYY - MM - DD\"\r\n                  placeholderTextColor={darkLight}\r\n                  onChangeText={handleChange('dateOfBirth')}\r\n                  onBlur={handleBlur('dateOfBirth')}\r\n                  value={dob ? dob.toDateString() : ''}\r\n                  icon=\"calendar\"\r\n                  editable={false}\r\n                  isDate={true}\r\n                  showDatePicker={showDatePicker}\r\n                />\r\n                <MyTextInput\r\n                  label=\"Password\"\r\n                  placeholder=\"* * * * * * * *\"\r\n                  placeholderTextColor={darkLight}\r\n                  onChangeText={handleChange('password')}\r\n                  onBlur={handleBlur('password')}\r\n                  value={values.password}\r\n                  secureTextEntry={hidePassword}\r\n                  icon=\"lock\"\r\n                  isPassword={true}\r\n                  hidePassword={hidePassword}\r\n                  setHidePassword={setHidePassword}\r\n                />\r\n                <MyTextInput\r\n                  label=\"Confirm Password\"\r\n                  placeholder=\"* * * * * * * *\"\r\n                  placeholderTextColor={darkLight}\r\n                  onChangeText={handleChange('confirmPassword')}\r\n                  onBlur={handleBlur('confirmPassword')}\r\n                  value={values.confirmPassword}\r\n                  secureTextEntry={hidePassword}\r\n                  icon=\"lock\"\r\n                  isPassword={true}\r\n                  hidePassword={hidePassword}\r\n                  setHidePassword={setHidePassword}\r\n                />\r\n                <MsgBox type={messageType}>{message}</MsgBox>\r\n\r\n                {!isSubmitting && (\r\n                  <StyledButton onPress={handleSubmit}>\r\n                    <ButtonText>Signup</ButtonText>\r\n                  </StyledButton>\r\n                )}\r\n                {isSubmitting && (\r\n                  <StyledButton disabled={true}>\r\n                    <ActivityIndicator size=\"large\" color={primary} />\r\n                  </StyledButton>\r\n                )}\r\n\r\n                <Line />\r\n                <ExtraView>\r\n                  <ExtraText>Already have an account? </ExtraText>\r\n                  <TextLink onPress={() => navigation.navigate('Login')}>\r\n                    <TextLinkContent>Login</TextLinkContent>\r\n                  </TextLink>\r\n                </ExtraView>\r\n              </StyledFormArea>\r\n            )}\r\n          </Formik>\r\n        </InnerContainer>\r\n      </StyledContainer>\r\n    </KeyboardAvoidingWrapper>\r\n  );\r\n};\r\n\r\nconst MyTextInput = ({ label, icon, isPassword, hidePassword, setHidePassword, isDate, showDatePicker, ...props }) => {\r\n  return (\r\n    <View>\r\n      <LeftIcon>\r\n        <Octicons name={icon} size={30} color={brand} />\r\n      </LeftIcon>\r\n      <StyledInputLabel>{label}</StyledInputLabel>\r\n\r\n      {isDate && (\r\n        <TouchableOpacity onPress={showDatePicker}>\r\n          <StyledTextInput {...props} />\r\n        </TouchableOpacity>\r\n      )}\r\n      {!isDate && <StyledTextInput {...props} />}\r\n\r\n      {isPassword && (\r\n        <RightIcon\r\n          onPress={() => {\r\n            setHidePassword(!hidePassword);\r\n          }}\r\n        >\r\n          <Ionicons name={hidePassword ? 'md-eye-off' : 'md-eye'} size={30} color={darkLight} />\r\n        </RightIcon>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n"]},"metadata":{},"sourceType":"module"}